// authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin

class Assignment {
  lazy authCode;
  lazy Integer refundPercent;
  
  assignmentStatus {

    Active {
      
      Assigned {
        
        pay(Member member, String aAuthCode) [isAuthCodeValid(aAuthCode)] / {
          makePayment(member, aAuthCode); 
        } -> Paid;

        start(Member member) / {
          banMember(member);
        } -> Assigned;
        
        finish(Member member) / {
          setAppropriateActiveStatus(AssignmentStatusActive.Assigned);
          attemptToFinishForBannedMember(member);
          rejectFinishRequest("Cannot finish a trip which has not started");
        } -> Assigned;
        
        // transitions out of Active composite state
      cancel() / {
        cancelTrip(member); 
      } -> Cancelled;
        
      }

      
      Paid {
        
        start(Member member) / {
          startTrip(member);
        } -> Started;

        pay(Member member, String aAuthCode) / {
          setAppropriateActiveStatus(AssignmentStatusActive.Paid);
          rejectPayment("Trip has already been paid for"); 
        } -> Paid;

        finish(Member member) / {
          setAppropriateActiveStatus(AssignmentStatusActive.Paid);
          rejectFinishRequest("Cannot finish a trip which has not started");
        } -> Paid;
        
        // transitions out of Active composite state
      cancel() / {
        setAppropriateActiveStatus(AssignmentStatusActive.Paid);
        cancelTrip(member); 
      } -> Cancelled;
      }

      
      Started {
        
        finish(Member member) / {
          finishTrip(member); 
        } -> Finished;
        
        pay(Member member, String aAuthCode) / {
          setAppropriateActiveStatus(AssignmentStatusActive.Started);
          rejectPayment("Trip has already been paid for"); 
        } -> Started;
        // transitions out of Active composite state
      cancel() / {
        setAppropriateActiveStatus(AssignmentStatusActive.Started);
        cancelTrip(member); 
      } -> Cancelled;
      }
    
      
      
    }


    Finished {

      pay(Member member, String aAuthCode) / {
        rejectPayment("Cannot pay for a trip which has finished"); 
      } -> Finished;

      start(Member member) / {
        rejectStartRequest("Cannot start a trip which has finished");
      } -> Finished;

      cancel() / {
        rejectCancelRequest("Cannot cancel a trip which has finished");
      } -> Finished;

    }

    
    Cancelled {
      
      pay(Member member, String aAuthCode) / {
        rejectPayment("Cannot pay for a trip which has been cancelled"); 
      } -> Cancelled;

      start(Member member) / {
        rejectStartRequest("Cannot start a trip which has been cancelled");
      } -> Cancelled;

      finish(Member member) / {
        rejectFinishRequest("Cannot finish a trip which has been cancelled");
      } -> Cancelled;
      
    }
  }
  
  //purely for testing purposes
  private attemptToFinishForBannedMember(Member member){
    if(MemberStatus.Banned.equals(member.getMemberStatus())){
      finishTrip(member);
    }
  }

  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private boolean isAuthCodeValid(String aAuthCode){
	
    if (aAuthCode.isEmpty()){
      return false;
    }
    else if (aAuthCode == null){
      return false;
    }
    return true;
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private boolean isMemberValid(Member member){
    return member.getMemberStatusFullName().equals("NotBanned");
  }

  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void makePayment(Member member, String aAuthCode){
    if (!isMemberValid(member)){
      throw new RuntimeException("Cannot pay for the trip due to a ban");
    }
    setAuthCode(aAuthCode);
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void startTrip(Member member){
    if (!isMemberValid(member)){
      throw new RuntimeException("Cannot start the trip due to a ban");
    }
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void cancelTrip(Member member){
	
    if (!isMemberValid(member)){
      throw new RuntimeException("Cannot cancel the trip due to a ban");
    }
  
  	switch(this.assignmentStatusActive) {
  	  case Paid:
  	  	setRefundPercent(50);
  	  	break;
  	  case Started:
  	  	setRefundPercent(10);
  	  	break;	
	}
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void finishTrip(Member member){
    if (!isMemberValid(member)){
      throw new RuntimeException("Cannot finish the trip due to a ban");
    }
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void banMember(Member member){
    member.ban();
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void rejectPayment(String error){
    throw new RuntimeException(error);
  }
   
  //for testing only
  public void setStatus(AssignmentStatus assignmentStatus){
    this.setAssignmentStatus(assignmentStatus);
  }
  
  //To prevent the exit status setting the state to null
  public void setAppropriateActiveStatus(AssignmentStatusActive activeStatus){
    if(AssignmentStatus.Active.equals(this.getAssignmentStatus())){
      this.setAssignmentStatusActive(activeStatus);
    }
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void rejectFinishRequest(String error){
    throw new RuntimeException(error);
  }
  
  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void rejectStartRequest(String error){
    throw new RuntimeException(error);
  }

  // authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin
  
  private void rejectCancelRequest(String error){
    throw new RuntimeException(error);
  }

}

// authors: Primarily Onyekachi Ezekwem, Rui Du, and Samuel Valentine, helped by Youssoff Mohamed, Yakir Bender, and Saif Shahin

class Member{
  memberStatus{
    NotBanned{
      ban() -> Banned;

    }
    Banned{}
  }
  
}
