package ca.mcgill.ecse.climbsafe.javafx.fxml.controllers;

import java.util.ArrayList;
import java.util.List;

import ca.mcgill.ecse.climbsafe.application.ClimbSafeApplication;
import ca.mcgill.ecse.climbsafe.controller.ClimbSafeFeatureSet1Controller;
import ca.mcgill.ecse.climbsafe.controller.ClimbSafeFeatureSet2Controller;
import ca.mcgill.ecse.climbsafe.controller.InvalidInputException;
import ca.mcgill.ecse.climbsafe.controller.TOEquipment;
import ca.mcgill.ecse.climbsafe.controller.TOEquipmentBundle;
import ca.mcgill.ecse.climbsafe.controller.TOMember;
import ca.mcgill.ecse.climbsafe.javafx.fxml.main.ClimbSafeFxmlView;
import ca.mcgill.ecse.climbsafe.model.ClimbSafe;
import ca.mcgill.ecse.climbsafe.model.EquipmentBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;

/**
 * ClimbSafe GUI controller features for
 * registerMember, updateMember, and deleteMember
 * 
 * @author Onyekachi Ezekwem, Saif Shahin, Yakir Bender
 *
 */

public class MemberController {
	@FXML
	private Button RegisterMemberButton;
	@FXML
	private Button DeleteMemberButton;
	@FXML
	private TextField UserNameTextField;
	@FXML
	private TextField EmailTextField;
	@FXML
	private Button UpdateMemberButton;
	@FXML
	private TextField PasswordTextField;
	@FXML
	private TextField EmergencyContactTextField;
	@FXML
	private ChoiceBox<TOMember> DeleteMemberBox;
	@FXML
	private ToggleButton requireGuideButton;
	@FXML
	private ToggleButton requireHotelButton;
	@FXML
	private TextField nrWeeksTextField;
	@FXML
	private ChoiceBox<TOEquipment> selectEquipmentBox;
	@FXML
	private TextField equipmentQuantityTextField;
	@FXML
	private ChoiceBox<TOEquipmentBundle> selectBundleBox;
	@FXML
	private TextField bundleQuantityTextField;
	@FXML
	private Button addEquipmentButton;
	private boolean requiresGuide = false;
	private boolean requiresHotel = false;
	private List<String> memberEquipment = new ArrayList<>();
	private List<Integer> memberQuantity = new ArrayList<>();
	

	  /**
	   * registerMember - Registers a member in the ClimbSafe database.
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Saif Shahin, Yakir Bender
	   */
	@FXML
	public void registerMember(ActionEvent event) {
		try {
			String email = EmailTextField.getText();
			String password = PasswordTextField.getText();
			String name = UserNameTextField.getText();
		    String emergencyContact = EmergencyContactTextField.getText();
		    int nrWeeks = Integer.valueOf(nrWeeksTextField.getText());
		    
		    
		    
		    if (email == null || email.trim().isEmpty()) {
		    	ViewUtils.showError("Please input a valid email address");
		    } 
		    else if (password == null || password.trim().isEmpty()) {
		    	ViewUtils.showError("Please input a valid password");
			}
		    else if (name == null || name.trim().isEmpty()) {
		    	ViewUtils.showError("Please input a valid name");
			}
		    else if (emergencyContact == null || emergencyContact.trim().isEmpty()) {
		    	ViewUtils.showError("Please input a valid emergency contact");
			}
		    else {
		      // reset the driver text field if success
		      if (ViewUtils.callController(() -> 
		      ClimbSafeFeatureSet2Controller.registerMember(email, password, name, emergencyContact, nrWeeks, requiresHotel, requiresGuide, memberEquipment, memberQuantity))) {
		    	  ViewUtils.makePopupWindow("Registration Successful", name + " has been registered as a Member.");
		    	  
		    	  EmailTextField.setText("");
		    	  PasswordTextField.setText("");
		    	  UserNameTextField.setText("");
		    	  EmergencyContactTextField.setText("");
		    	  nrWeeksTextField.setText("");
		    	  requiresGuide = false;
		    	  requiresHotel = false;
		    	  memberQuantity.clear();
		    	  memberEquipment.clear();
		    	  requireGuideButton.setSelected(false);
		    	  requireHotelButton.setSelected(false);
		    	  equipmentQuantityTextField.setText("");
		    	  bundleQuantityTextField.setText("");
		      }
		    }
		}
	    catch(NumberFormatException e) {
	    	ViewUtils.showError("Please input a valid number of weeks!");
	    }

	}
	
	  /**
	   * deleteMember - Deletes a member from the ClimbSafe database.
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Saif Shahin, Yakir Bender
	   */
	@FXML
	public void deleteMember(ActionEvent event) {
		// TODO Autogenerated
		TOMember member = DeleteMemberBox.getValue();
	    
	    if (member == null) {
	    	ViewUtils.showError("Please select a valid email address.");
	    } 
	    else {
	      // reset the driver text field if success
	      if (ViewUtils.callController(() -> 
	      ClimbSafeFeatureSet1Controller.deleteMember(member.getMemberEmail()))) {
	    	  EmailTextField.setText("");
	    	  PasswordTextField.setText("");
	    	  UserNameTextField.setText("");
	    	  EmergencyContactTextField.setText("");
	    	  nrWeeksTextField.setText("");
	    	  requiresGuide = false;
	    	  requiresHotel = false;
	    	  memberQuantity.clear();
	    	  memberEquipment.clear();
	    	  requireGuideButton.setSelected(false);
	    	  requireHotelButton.setSelected(false);
	    	  equipmentQuantityTextField.setText("");
	    	  bundleQuantityTextField.setText("");
	    	  ViewUtils.makePopupWindow("Deletion Successful", "The following Member has been deleted: " + member.getMemberEmail());
	      }
	    }
	}
	
	  /**
	   * updateMember - Updates a member's information in the ClimbSafe database.
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Saif Shahin, Yakir Bender
	   */
	@FXML
	public void updateMember(ActionEvent event) {
		// TODO Autogenerated
		try {
			TOMember member = DeleteMemberBox.getValue();
			String email = EmailTextField.getText();
			String password = PasswordTextField.getText();
			String name = UserNameTextField.getText();
		    String emergencyContact = EmergencyContactTextField.getText();
		    int nrWeeks = Integer.valueOf(nrWeeksTextField.getText());
		    
		    if (member == null) {
		    	ViewUtils.showError("Please select a member!");
		    }
		    
		    if (!email.equals(member.getMemberEmail())) {
		    	ViewUtils.showError("You can not change your email!");
		    } 
		    else if (password == null || password.trim().isEmpty()) {
		    	ViewUtils.showError("Please input a valid password");
			}
		    else if (name == null || name.trim().isEmpty()) {
		    	ViewUtils.showError("Please input a valid name");
			}
		    else if (emergencyContact == null || emergencyContact.trim().isEmpty()) {
		    	ViewUtils.showError("Please input a valid emergency contact");
			}
		    else {
		      // reset the driver text field if success
		      if (ViewUtils.callController(() -> 
		      ClimbSafeFeatureSet2Controller.updateMember(email, password, name, emergencyContact, nrWeeks, requiresHotel, requiresGuide, memberEquipment, memberQuantity))) {
		    	  ViewUtils.makePopupWindow("Update Successful", name + " has been updated as a Member.");
		    	  
		    	  EmailTextField.setText("");
		    	  PasswordTextField.setText("");
		    	  UserNameTextField.setText("");
		    	  EmergencyContactTextField.setText("");
		    	  nrWeeksTextField.setText("");
		    	  requiresGuide = false;
		    	  requiresHotel = false;
		    	  memberQuantity.clear();
		    	  memberEquipment.clear();
		    	  requireGuideButton.setSelected(false);
		    	  requireHotelButton.setSelected(false);
		    	  equipmentQuantityTextField.setText("");
		    	  bundleQuantityTextField.setText("");
		    	  
		      }
		    }
		}
		catch(NumberFormatException e) {
	    	ViewUtils.showError("Please input a valid number of weeks!");
	    }
	}
	
	  /**
	   * requireGuide - toggles requireGuide boolean on click 
	   * whether a member requested a guide.
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Saif Shahin, Yakir Bender
	   */
	@FXML
	public void requireGuide(ActionEvent event) {
		// TODO Autogenerated
		if (requiresGuide) { 
			requiresGuide = false;
	    	ViewUtils.makePopupWindow("Successfully removed Guide", "Guide removed!");
		}
		else if (!requiresGuide) { 
			requiresGuide = true; 
			ViewUtils.makePopupWindow("Successfully added Guide", "Guide added!");
			}
	}
	
	  /**
	   * requireHotel - toggles requireHotel boolean on click
	   * whether a member requested a guide.
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Saif Shahin, Yakir Bender
	   */
	@FXML
	public void requireHotel(ActionEvent event) {
		// TODO Autogenerated
		if (requiresHotel) { 
			requiresHotel = false;
			ViewUtils.makePopupWindow("Successfully removed Hotel", "Hotel removed!");
			}
		else if (!requiresHotel) { 
			requiresHotel = true; 
			ViewUtils.makePopupWindow("Successfully added Hotel", "Hotel added!");
			}
	
	}

	  /**
	   * addEquipment - adds an equipment or equipment bundle 
	   * with a specified quantity to the member's selected items on click.
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Saif Shahin, Yakir Bender
	   */
	@FXML
	public void addEquipment(ActionEvent event) {
		// TODO Autogenerated
		try {
			TOEquipment equipment = selectEquipmentBox.getValue();
			
		    TOEquipmentBundle bundle = selectBundleBox.getValue();
		    
		    
		    if (equipment == null && bundle == null) {
		    	ViewUtils.showError("Please select an equipment or a bundle!");
		    } 
		    
		    else if(equipment != null && bundle == null) {
		    	int equipmentQuantity = Integer.valueOf(equipmentQuantityTextField.getText());
		    	if (ViewUtils.callController(() -> 
			      addEquipmentAndQuantity(equipmentQuantity, equipment))) {
		    		equipmentQuantityTextField.setText("");
			    	  ViewUtils.makePopupWindow("Addition Successful", "The following equipment has been added: " + equipment.getEquipmentName());
			      }
		    }
		    
		    else if (bundle != null && equipment == null) {
		    	int bundleQuantity = Integer.valueOf(bundleQuantityTextField.getText());
		    	if (ViewUtils.callController(() -> 
			      addBundleAndQuantity(bundleQuantity, bundle))) {
		    			bundleQuantityTextField.setText("");
			    	  ViewUtils.makePopupWindow("Addition Successful", "The following bundle has been added: " + bundle.getEquipmentBundleName());
			      }
		    }
		    
		}
		catch(NumberFormatException e) {
	    	ViewUtils.showError("Please input a valid number of equipment and bundle quantity!");
	    }
		
		
	}
	
	  /**
	   * addEquipmentAndQuantity - helper method that adds equipments and desired quantities at once
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Yakir Bender
	   */
	private void addEquipmentAndQuantity(int quantity, TOEquipment equipment) {
		memberEquipment.add(equipment.getEquipmentName());
		memberQuantity.add(quantity);
	}
	
	  /**
	   * addEquipmentAndQuantity - helper method that adds bundle and their desired quantity at once.
	   * @param ActionEvent event
	   * @author Onyekachi Ezekwem, Yakir Bender
	   */
	private void addBundleAndQuantity(int quantity, TOEquipmentBundle memberBundle) {
		memberEquipment.add(memberBundle.getEquipmentBundleName());
		memberQuantity.add(quantity);
	}
	/**
	 * initialize() - method that refreshes the page on click on any choiceBox
	 * @param ActionEvent event
	 * @author Onyekachi Ezekwem, Yakir Bender, Saif Shahin
	 * **/
	 @FXML
	    public void initialize() {
	      // the choice boxes listen to the refresh event
	      DeleteMemberBox.addEventHandler(ClimbSafeFxmlView.REFRESH_EVENT, e -> {
	    	DeleteMemberBox.setItems(ViewUtils.getMembers());
	        // reset the choice
	    	DeleteMemberBox.setValue(null);
	      });
	      
	      selectEquipmentBox.addEventHandler(ClimbSafeFxmlView.REFRESH_EVENT, e -> {
	    	selectEquipmentBox.setItems(ViewUtils.getEquipment());
	    	selectEquipmentBox.setValue(null);
	      });
	      
	      selectBundleBox.addEventHandler(ClimbSafeFxmlView.REFRESH_EVENT, e -> {
	    	selectBundleBox.setItems(ViewUtils.getEquipmentBundles());
	    	selectBundleBox.setValue(null);
	      });
	    	
	    	

	      // let the application be aware of the refreshable node
	      ClimbSafeFxmlView.getInstance().registerRefreshEvent(DeleteMemberBox);
	      ClimbSafeFxmlView.getInstance().registerRefreshEvent(selectEquipmentBox);
	      ClimbSafeFxmlView.getInstance().registerRefreshEvent(selectBundleBox);
	    }
}
